#include <iostream>
#include <set>

#include "PartialSolution.h"
#include "Heap.h"

using namespace std;

int numElemUnion (vector < int > a, vector < int > b ) {
	set < int > s;

	for ( int i = 0; i < a.size(); i++ ) {
			s.insert(a[i]);
	}

	for ( int i = 0; i < b.size(); i++ ) {
			s.insert(b[i]);
	}

	return s.size();
}

int main () {
	Instance I;
	PartialSolution P, E, S;
	Set X;
	Heap < PartialSolution > Nos;

	Nos.insert(P);

	long double U = INFINITY;
	cout << U << endl;

	I.readInstance ();

	vector < bool > map (I.numberSets, true);

	I.printInstance();

	cout << Nos.top();

	cout << "Numero de elementos... " << endl;
	cout << numElemUnion ( I.sets[2].elements, I.sets[3].elements );
	cout << endl;

	while ( !Nos.empty() ) {
		E = Nos.top();
		if ( E.status == Complete && E.status == Partial ) {
			S = E;
			break;
		}

		// Selecionando filhos de Nos
		for ( int i = 0; i < map.size(); i++ ) {
			if ( map [i] ) {
				X = I.sets[i];
				
			}
		}
		

		/* ... */
	}

	return 0;
}
